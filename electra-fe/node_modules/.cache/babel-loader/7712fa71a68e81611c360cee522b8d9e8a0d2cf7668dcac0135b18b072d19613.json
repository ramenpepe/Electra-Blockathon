{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findOrGenerateResponsiveLayout = findOrGenerateResponsiveLayout;\nexports.getBreakpointFromWidth = getBreakpointFromWidth;\nexports.getColsFromBreakpoint = getColsFromBreakpoint;\nexports.sortBreakpoints = sortBreakpoints;\nvar _utils = require(\"./utils\");\n\n/**\n * Given a width, find the highest breakpoint that matches is valid for it (width > breakpoint).\n *\n * @param  {Object} breakpoints Breakpoints object (e.g. {lg: 1200, md: 960, ...})\n * @param  {Number} width Screen width.\n * @return {String}       Highest breakpoint that is less than width.\n */\nfunction getBreakpointFromWidth(breakpoints\n/*: Breakpoints<Breakpoint>*/, width\n/*: number*/) /*: Breakpoint*/\n{\n  var sorted = sortBreakpoints(breakpoints);\n  var matching = sorted[0];\n  for (var i = 1, len = sorted.length; i < len; i++) {\n    var breakpointName = sorted[i];\n    if (width > breakpoints[breakpointName]) matching = breakpointName;\n  }\n  return matching;\n}\n/**\n * Given a breakpoint, get the # of cols set for it.\n * @param  {String} breakpoint Breakpoint name.\n * @param  {Object} cols       Map of breakpoints to cols.\n * @return {Number}            Number of cols.\n */\n\nfunction getColsFromBreakpoint(breakpoint\n/*: Breakpoint*/, cols\n/*: Breakpoints<Breakpoint>*/) /*: number*/\n{\n  if (!cols[breakpoint]) {\n    throw new Error(\"ResponsiveReactGridLayout: `cols` entry for breakpoint \" + breakpoint + \" is missing!\");\n  }\n  return cols[breakpoint];\n}\n/**\n * Given existing layouts and a new breakpoint, find or generate a new layout.\n *\n * This finds the layout above the new one and generates from it, if it exists.\n *\n * @param  {Object} layouts     Existing layouts.\n * @param  {Array} breakpoints All breakpoints.\n * @param  {String} breakpoint New breakpoint.\n * @param  {String} breakpoint Last breakpoint (for fallback).\n * @param  {Number} cols       Column count at new breakpoint.\n * @param  {Boolean} verticalCompact Whether or not to compact the layout\n *   vertically.\n * @return {Array}             New layout.\n */\n\nfunction findOrGenerateResponsiveLayout(layouts\n/*: ResponsiveLayout<Breakpoint>*/, breakpoints\n/*: Breakpoints<Breakpoint>*/, breakpoint\n/*: Breakpoint*/, lastBreakpoint\n/*: Breakpoint*/, cols\n/*: number*/, compactType\n/*: CompactType*/) /*: Layout*/\n{\n  // If it already exists, just return it.\n  if (layouts[breakpoint]) return (0, _utils.cloneLayout)(layouts[breakpoint]); // Find or generate the next layout\n\n  var layout = layouts[lastBreakpoint];\n  var breakpointsSorted = sortBreakpoints(breakpoints);\n  var breakpointsAbove = breakpointsSorted.slice(breakpointsSorted.indexOf(breakpoint));\n  for (var i = 0, len = breakpointsAbove.length; i < len; i++) {\n    var b = breakpointsAbove[i];\n    if (layouts[b]) {\n      layout = layouts[b];\n      break;\n    }\n  }\n  layout = (0, _utils.cloneLayout)(layout || []); // clone layout so we don't modify existing items\n\n  return (0, _utils.compact)((0, _utils.correctBounds)(layout, {\n    cols: cols\n  }), compactType, cols);\n}\n/**\n * Given breakpoints, return an array of breakpoints sorted by width. This is usually\n * e.g. ['xxs', 'xs', 'sm', ...]\n *\n * @param  {Object} breakpoints Key/value pair of breakpoint names to widths.\n * @return {Array}              Sorted breakpoints.\n */\n\nfunction sortBreakpoints(breakpoints\n/*: Breakpoints<Breakpoint>*/) /*: Array<Breakpoint>*/\n{\n  var keys\n  /*: Array<string>*/ = Object.keys(breakpoints);\n  return keys.sort(function (a, b) {\n    return breakpoints[a] - breakpoints[b];\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","findOrGenerateResponsiveLayout","getBreakpointFromWidth","getColsFromBreakpoint","sortBreakpoints","_utils","require","breakpoints","width","sorted","matching","i","len","length","breakpointName","breakpoint","cols","Error","layouts","lastBreakpoint","compactType","cloneLayout","layout","breakpointsSorted","breakpointsAbove","slice","indexOf","b","compact","correctBounds","keys","sort","a"],"sources":["/root/Electra-Blockathon/electra-fe/node_modules/react-grid-layout/build/responsiveUtils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findOrGenerateResponsiveLayout = findOrGenerateResponsiveLayout;\nexports.getBreakpointFromWidth = getBreakpointFromWidth;\nexports.getColsFromBreakpoint = getColsFromBreakpoint;\nexports.sortBreakpoints = sortBreakpoints;\n\nvar _utils = require(\"./utils\");\n\n/**\n * Given a width, find the highest breakpoint that matches is valid for it (width > breakpoint).\n *\n * @param  {Object} breakpoints Breakpoints object (e.g. {lg: 1200, md: 960, ...})\n * @param  {Number} width Screen width.\n * @return {String}       Highest breakpoint that is less than width.\n */\nfunction getBreakpointFromWidth(breakpoints\n/*: Breakpoints<Breakpoint>*/\n, width\n/*: number*/\n)\n/*: Breakpoint*/\n{\n  var sorted = sortBreakpoints(breakpoints);\n  var matching = sorted[0];\n\n  for (var i = 1, len = sorted.length; i < len; i++) {\n    var breakpointName = sorted[i];\n    if (width > breakpoints[breakpointName]) matching = breakpointName;\n  }\n\n  return matching;\n}\n/**\n * Given a breakpoint, get the # of cols set for it.\n * @param  {String} breakpoint Breakpoint name.\n * @param  {Object} cols       Map of breakpoints to cols.\n * @return {Number}            Number of cols.\n */\n\n\nfunction getColsFromBreakpoint(breakpoint\n/*: Breakpoint*/\n, cols\n/*: Breakpoints<Breakpoint>*/\n)\n/*: number*/\n{\n  if (!cols[breakpoint]) {\n    throw new Error(\"ResponsiveReactGridLayout: `cols` entry for breakpoint \" + breakpoint + \" is missing!\");\n  }\n\n  return cols[breakpoint];\n}\n/**\n * Given existing layouts and a new breakpoint, find or generate a new layout.\n *\n * This finds the layout above the new one and generates from it, if it exists.\n *\n * @param  {Object} layouts     Existing layouts.\n * @param  {Array} breakpoints All breakpoints.\n * @param  {String} breakpoint New breakpoint.\n * @param  {String} breakpoint Last breakpoint (for fallback).\n * @param  {Number} cols       Column count at new breakpoint.\n * @param  {Boolean} verticalCompact Whether or not to compact the layout\n *   vertically.\n * @return {Array}             New layout.\n */\n\n\nfunction findOrGenerateResponsiveLayout(layouts\n/*: ResponsiveLayout<Breakpoint>*/\n, breakpoints\n/*: Breakpoints<Breakpoint>*/\n, breakpoint\n/*: Breakpoint*/\n, lastBreakpoint\n/*: Breakpoint*/\n, cols\n/*: number*/\n, compactType\n/*: CompactType*/\n)\n/*: Layout*/\n{\n  // If it already exists, just return it.\n  if (layouts[breakpoint]) return (0, _utils.cloneLayout)(layouts[breakpoint]); // Find or generate the next layout\n\n  var layout = layouts[lastBreakpoint];\n  var breakpointsSorted = sortBreakpoints(breakpoints);\n  var breakpointsAbove = breakpointsSorted.slice(breakpointsSorted.indexOf(breakpoint));\n\n  for (var i = 0, len = breakpointsAbove.length; i < len; i++) {\n    var b = breakpointsAbove[i];\n\n    if (layouts[b]) {\n      layout = layouts[b];\n      break;\n    }\n  }\n\n  layout = (0, _utils.cloneLayout)(layout || []); // clone layout so we don't modify existing items\n\n  return (0, _utils.compact)((0, _utils.correctBounds)(layout, {\n    cols: cols\n  }), compactType, cols);\n}\n/**\n * Given breakpoints, return an array of breakpoints sorted by width. This is usually\n * e.g. ['xxs', 'xs', 'sm', ...]\n *\n * @param  {Object} breakpoints Key/value pair of breakpoint names to widths.\n * @return {Array}              Sorted breakpoints.\n */\n\n\nfunction sortBreakpoints(breakpoints\n/*: Breakpoints<Breakpoint>*/\n)\n/*: Array<Breakpoint>*/\n{\n  var keys\n  /*: Array<string>*/\n  = Object.keys(breakpoints);\n  return keys.sort(function (a, b) {\n    return breakpoints[a] - breakpoints[b];\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}