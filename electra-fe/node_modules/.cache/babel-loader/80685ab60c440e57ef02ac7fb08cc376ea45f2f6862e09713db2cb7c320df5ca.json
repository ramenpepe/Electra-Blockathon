{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calcGridColWidth = calcGridColWidth;\nexports.calcGridItemPosition = calcGridItemPosition;\nexports.calcGridItemWHPx = calcGridItemWHPx;\nexports.calcWH = calcWH;\nexports.calcXY = calcXY;\nexports.clamp = clamp;\n\n/*:: import type { Position } from \"./utils\";*/\n\n/*:: export type PositionParams = {\n  margin: [number, number],\n  containerPadding: [number, number],\n  containerWidth: number,\n  cols: number,\n  rowHeight: number,\n  maxRows: number\n};*/\n// Helper for generating column width\nfunction calcGridColWidth(positionParams\n/*: PositionParams*/) /*: number*/\n{\n  var margin = positionParams.margin,\n    containerPadding = positionParams.containerPadding,\n    containerWidth = positionParams.containerWidth,\n    cols = positionParams.cols;\n  return (containerWidth - margin[0] * (cols - 1) - containerPadding[0] * 2) / cols;\n} // This can either be called:\n// calcGridItemWHPx(w, colWidth, margin[0])\n// or\n// calcGridItemWHPx(h, rowHeight, margin[1])\n\nfunction calcGridItemWHPx(gridUnits\n/*: number*/, colOrRowSize\n/*: number*/, marginPx\n/*: number*/) /*: number*/\n{\n  // 0 * Infinity === NaN, which causes problems with resize contraints\n  if (!Number.isFinite(gridUnits)) return gridUnits;\n  return Math.round(colOrRowSize * gridUnits + Math.max(0, gridUnits - 1) * marginPx);\n}\n/**\n * Return position on the page given an x, y, w, h.\n * left, top, width, height are all in pixels.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calculations.\n * @param  {Number}  x                      X coordinate in grid units.\n * @param  {Number}  y                      Y coordinate in grid units.\n * @param  {Number}  w                      W coordinate in grid units.\n * @param  {Number}  h                      H coordinate in grid units.\n * @return {Position}                       Object containing coords.\n */\n\nfunction calcGridItemPosition(positionParams\n/*: PositionParams*/, x\n/*: number*/, y\n/*: number*/, w\n/*: number*/, h\n/*: number*/, state\n/*: ?Object*/) /*: Position*/\n{\n  var margin = positionParams.margin,\n    containerPadding = positionParams.containerPadding,\n    rowHeight = positionParams.rowHeight;\n  var colWidth = calcGridColWidth(positionParams);\n  var out = {}; // If resizing, use the exact width and height as returned from resizing callbacks.\n\n  if (state && state.resizing) {\n    out.width = Math.round(state.resizing.width);\n    out.height = Math.round(state.resizing.height);\n  } // Otherwise, calculate from grid units.\n  else {\n    out.width = calcGridItemWHPx(w, colWidth, margin[0]);\n    out.height = calcGridItemWHPx(h, rowHeight, margin[1]);\n  } // If dragging, use the exact width and height as returned from dragging callbacks.\n\n  if (state && state.dragging) {\n    out.top = Math.round(state.dragging.top);\n    out.left = Math.round(state.dragging.left);\n  } // Otherwise, calculate from grid units.\n  else {\n    out.top = Math.round((rowHeight + margin[1]) * y + containerPadding[1]);\n    out.left = Math.round((colWidth + margin[0]) * x + containerPadding[0]);\n  }\n  return out;\n}\n/**\n * Translate x and y coordinates from pixels to grid units.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calculations.\n * @param  {Number} top                     Top position (relative to parent) in pixels.\n * @param  {Number} left                    Left position (relative to parent) in pixels.\n * @param  {Number} w                       W coordinate in grid units.\n * @param  {Number} h                       H coordinate in grid units.\n * @return {Object}                         x and y in grid units.\n */\n\nfunction calcXY(positionParams\n/*: PositionParams*/, top\n/*: number*/, left\n/*: number*/, w\n/*: number*/, h\n/*: number*/) /*: { x: number, y: number }*/\n{\n  var margin = positionParams.margin,\n    cols = positionParams.cols,\n    rowHeight = positionParams.rowHeight,\n    maxRows = positionParams.maxRows;\n  var colWidth = calcGridColWidth(positionParams); // left = colWidth * x + margin * (x + 1)\n  // l = cx + m(x+1)\n  // l = cx + mx + m\n  // l - m = cx + mx\n  // l - m = x(c + m)\n  // (l - m) / (c + m) = x\n  // x = (left - margin) / (coldWidth + margin)\n\n  var x = Math.round((left - margin[0]) / (colWidth + margin[0]));\n  var y = Math.round((top - margin[1]) / (rowHeight + margin[1])); // Capping\n\n  x = clamp(x, 0, cols - w);\n  y = clamp(y, 0, maxRows - h);\n  return {\n    x: x,\n    y: y\n  };\n}\n/**\n * Given a height and width in pixel values, calculate grid units.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calcluations.\n * @param  {Number} height                  Height in pixels.\n * @param  {Number} width                   Width in pixels.\n * @param  {Number} x                       X coordinate in grid units.\n * @param  {Number} y                       Y coordinate in grid units.\n * @return {Object}                         w, h as grid units.\n */\n\nfunction calcWH(positionParams\n/*: PositionParams*/, width\n/*: number*/, height\n/*: number*/, x\n/*: number*/, y\n/*: number*/) /*: { w: number, h: number }*/\n{\n  var margin = positionParams.margin,\n    maxRows = positionParams.maxRows,\n    cols = positionParams.cols,\n    rowHeight = positionParams.rowHeight;\n  var colWidth = calcGridColWidth(positionParams); // width = colWidth * w - (margin * (w - 1))\n  // ...\n  // w = (width + margin) / (colWidth + margin)\n\n  var w = Math.round((width + margin[0]) / (colWidth + margin[0]));\n  var h = Math.round((height + margin[1]) / (rowHeight + margin[1])); // Capping\n\n  w = clamp(w, 0, cols - x);\n  h = clamp(h, 0, maxRows - y);\n  return {\n    w: w,\n    h: h\n  };\n} // Similar to _.clamp\n\nfunction clamp(num\n/*: number*/, lowerBound\n/*: number*/, upperBound\n/*: number*/) /*: number*/\n{\n  return Math.max(Math.min(num, upperBound), lowerBound);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","calcGridColWidth","calcGridItemPosition","calcGridItemWHPx","calcWH","calcXY","clamp","positionParams","margin","containerPadding","containerWidth","cols","gridUnits","colOrRowSize","marginPx","Number","isFinite","Math","round","max","x","y","w","h","state","rowHeight","colWidth","out","resizing","width","height","dragging","top","left","maxRows","num","lowerBound","upperBound","min"],"sources":["/root/Electra-Blockathon/electra-fe/node_modules/react-grid-layout/build/calculateUtils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calcGridColWidth = calcGridColWidth;\nexports.calcGridItemPosition = calcGridItemPosition;\nexports.calcGridItemWHPx = calcGridItemWHPx;\nexports.calcWH = calcWH;\nexports.calcXY = calcXY;\nexports.clamp = clamp;\n\n/*:: import type { Position } from \"./utils\";*/\n\n/*:: export type PositionParams = {\n  margin: [number, number],\n  containerPadding: [number, number],\n  containerWidth: number,\n  cols: number,\n  rowHeight: number,\n  maxRows: number\n};*/\n// Helper for generating column width\nfunction calcGridColWidth(positionParams\n/*: PositionParams*/\n)\n/*: number*/\n{\n  var margin = positionParams.margin,\n      containerPadding = positionParams.containerPadding,\n      containerWidth = positionParams.containerWidth,\n      cols = positionParams.cols;\n  return (containerWidth - margin[0] * (cols - 1) - containerPadding[0] * 2) / cols;\n} // This can either be called:\n// calcGridItemWHPx(w, colWidth, margin[0])\n// or\n// calcGridItemWHPx(h, rowHeight, margin[1])\n\n\nfunction calcGridItemWHPx(gridUnits\n/*: number*/\n, colOrRowSize\n/*: number*/\n, marginPx\n/*: number*/\n)\n/*: number*/\n{\n  // 0 * Infinity === NaN, which causes problems with resize contraints\n  if (!Number.isFinite(gridUnits)) return gridUnits;\n  return Math.round(colOrRowSize * gridUnits + Math.max(0, gridUnits - 1) * marginPx);\n}\n/**\n * Return position on the page given an x, y, w, h.\n * left, top, width, height are all in pixels.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calculations.\n * @param  {Number}  x                      X coordinate in grid units.\n * @param  {Number}  y                      Y coordinate in grid units.\n * @param  {Number}  w                      W coordinate in grid units.\n * @param  {Number}  h                      H coordinate in grid units.\n * @return {Position}                       Object containing coords.\n */\n\n\nfunction calcGridItemPosition(positionParams\n/*: PositionParams*/\n, x\n/*: number*/\n, y\n/*: number*/\n, w\n/*: number*/\n, h\n/*: number*/\n, state\n/*: ?Object*/\n)\n/*: Position*/\n{\n  var margin = positionParams.margin,\n      containerPadding = positionParams.containerPadding,\n      rowHeight = positionParams.rowHeight;\n  var colWidth = calcGridColWidth(positionParams);\n  var out = {}; // If resizing, use the exact width and height as returned from resizing callbacks.\n\n  if (state && state.resizing) {\n    out.width = Math.round(state.resizing.width);\n    out.height = Math.round(state.resizing.height);\n  } // Otherwise, calculate from grid units.\n  else {\n    out.width = calcGridItemWHPx(w, colWidth, margin[0]);\n    out.height = calcGridItemWHPx(h, rowHeight, margin[1]);\n  } // If dragging, use the exact width and height as returned from dragging callbacks.\n\n\n  if (state && state.dragging) {\n    out.top = Math.round(state.dragging.top);\n    out.left = Math.round(state.dragging.left);\n  } // Otherwise, calculate from grid units.\n  else {\n    out.top = Math.round((rowHeight + margin[1]) * y + containerPadding[1]);\n    out.left = Math.round((colWidth + margin[0]) * x + containerPadding[0]);\n  }\n\n  return out;\n}\n/**\n * Translate x and y coordinates from pixels to grid units.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calculations.\n * @param  {Number} top                     Top position (relative to parent) in pixels.\n * @param  {Number} left                    Left position (relative to parent) in pixels.\n * @param  {Number} w                       W coordinate in grid units.\n * @param  {Number} h                       H coordinate in grid units.\n * @return {Object}                         x and y in grid units.\n */\n\n\nfunction calcXY(positionParams\n/*: PositionParams*/\n, top\n/*: number*/\n, left\n/*: number*/\n, w\n/*: number*/\n, h\n/*: number*/\n)\n/*: { x: number, y: number }*/\n{\n  var margin = positionParams.margin,\n      cols = positionParams.cols,\n      rowHeight = positionParams.rowHeight,\n      maxRows = positionParams.maxRows;\n  var colWidth = calcGridColWidth(positionParams); // left = colWidth * x + margin * (x + 1)\n  // l = cx + m(x+1)\n  // l = cx + mx + m\n  // l - m = cx + mx\n  // l - m = x(c + m)\n  // (l - m) / (c + m) = x\n  // x = (left - margin) / (coldWidth + margin)\n\n  var x = Math.round((left - margin[0]) / (colWidth + margin[0]));\n  var y = Math.round((top - margin[1]) / (rowHeight + margin[1])); // Capping\n\n  x = clamp(x, 0, cols - w);\n  y = clamp(y, 0, maxRows - h);\n  return {\n    x: x,\n    y: y\n  };\n}\n/**\n * Given a height and width in pixel values, calculate grid units.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calcluations.\n * @param  {Number} height                  Height in pixels.\n * @param  {Number} width                   Width in pixels.\n * @param  {Number} x                       X coordinate in grid units.\n * @param  {Number} y                       Y coordinate in grid units.\n * @return {Object}                         w, h as grid units.\n */\n\n\nfunction calcWH(positionParams\n/*: PositionParams*/\n, width\n/*: number*/\n, height\n/*: number*/\n, x\n/*: number*/\n, y\n/*: number*/\n)\n/*: { w: number, h: number }*/\n{\n  var margin = positionParams.margin,\n      maxRows = positionParams.maxRows,\n      cols = positionParams.cols,\n      rowHeight = positionParams.rowHeight;\n  var colWidth = calcGridColWidth(positionParams); // width = colWidth * w - (margin * (w - 1))\n  // ...\n  // w = (width + margin) / (colWidth + margin)\n\n  var w = Math.round((width + margin[0]) / (colWidth + margin[0]));\n  var h = Math.round((height + margin[1]) / (rowHeight + margin[1])); // Capping\n\n  w = clamp(w, 0, cols - x);\n  h = clamp(h, 0, maxRows - y);\n  return {\n    w: w,\n    h: h\n  };\n} // Similar to _.clamp\n\n\nfunction clamp(num\n/*: number*/\n, lowerBound\n/*: number*/\n, upperBound\n/*: number*/\n)\n/*: number*/\n{\n  return Math.max(Math.min(num, upperBound), lowerBound);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}